{
  "name": "Content Automation RAG Pipeline",
  "nodes": [
    {
      "id": "1",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1,
      "position": [200, 200],
      "parameters": {
        "updates": ["message"],
        "additionalFields": {}
      },
      "notes": "Receives user prompt. Uses chat_id to maintain session context.",
      "notesInFlow": true
    },
    {
      "id": "2",
      "name": "Classify Intent / Action",
      "type": "n8n-nodes-base.openai",
      "typeVersion": 3,
      "position": [480, 180],
      "parameters": {
        "resource": "chat",
        "model": "gpt-4o-mini",
        "operation": "createChatCompletion",
        "messages": [
          {
            "role": "system",
            "content": "You classify if the user wants a NEW_ARTICLE or FOLLOW_UP based on prior context summary. Return JSON {action:string}."
          },
          {
            "role": "user",
            "content": "={{$json[\"message\"][\"text\"]}}"
          }
        ],
        "temperature": 0
      },
      "notes": "Lightweight routing (could skip initially).",
      "notesInFlow": true
    },
    {
      "id": "3",
      "name": "Embed Prompt",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [720, 120],
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/embeddings",
        "authentication": "predefinedCredentialType",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\n  \"input\": $json.message.text,\n  \"model\": \"text-embedding-3-small\"\n}"
      },
      "notes": "Generates 1536-d vector for retrieval.",
      "notesInFlow": true,
      "credentials": {
        "httpHeaderAuth": {
          "id": "openai-api-key",
          "name": "OpenAI API Key"
        }
      }
    },
    {
      "id": "4",
      "name": "Vector Retrieval (Supabase RPC)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [960, 120],
      "parameters": {
        "method": "POST",
        "url": "={{$env.SUPABASE_URL}}/rest/v1/rpc/match_documents",
        "jsonParameters": true,
        "authentication": "none",
        "headers": {
          "Content-Type": "application/json",
          "apikey": "={{$env.SUPABASE_SERVICE_KEY}}",
          "Authorization": "Bearer {{$env.SUPABASE_SERVICE_KEY}}"
        },
        "options": {},
        "bodyParametersJson": "={\n  \"query_embedding\": $json.data[0].embedding,\n  \"match_count\": 8\n}"
      },
      "notes": "Calls stored procedure to get top 8 semantic chunks.",
      "notesInFlow": true
    },
    {
      "id": "5",
      "name": "Assemble Prompt",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1200, 120],
      "parameters": {
        "functionCode": "// Build structured prompt with sections, tone, citations\nconst chunks = items[0].json;\nconst context = (Array.isArray(chunks) ? chunks : [chunks])\n  .map((c,i)=>`[${i+1}] ${c.content}`)\n  .join('\n');\nreturn [{ json: { structuredPrompt: `You are a content generator...\n\nCONTEXT:\n${context}\n\nTASK: Produce JSON {title:string, summary:string, sections:[{heading:string, text:string, citations:number[]}]}` } }];"
      },
      "notes": "Condenses retrieved chunks + instructions.",
      "notesInFlow": true
    },
    {
      "id": "6",
      "name": "Draft Generation (LLM)",
      "type": "n8n-nodes-base.openai",
      "typeVersion": 3,
      "position": [1440, 120],
      "parameters": {
        "resource": "chat",
        "model": "gpt-4o-mini",
        "operation": "createChatCompletion",
        "messages": [
          {"role": "system", "content": "Respond ONLY with valid JSON."},
          {"role": "user", "content": "={{$json[\"structuredPrompt\"]}}"}
        ],
        "temperature": 0.4
      },
      "notes": "Creates first JSON draft.",
      "notesInFlow": true
    },
    {
      "id": "7",
      "name": "Draft Review Classifier",
      "type": "n8n-nodes-base.openai",
      "typeVersion": 3,
      "position": [1680, 120],
      "parameters": {
        "resource": "chat",
        "model": "gpt-4o-mini",
        "operation": "createChatCompletion",
        "messages": [
          {"role": "system", "content": "You classify if JSON draft needs REVISION or is APPROVED. Return {status:string}."},
          {"role": "user", "content": "={{$json[\"choices\"][0][\"message\"][\"content\"]}}"}
        ],
        "temperature": 0
      },
      "notes": "HITL gate can optionally precede this; here simplified.",
      "notesInFlow": true
    },
    {
      "id": "8",
      "name": "IF Needs Revision",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1920, 120],
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.choices[0].message.content}}",
              "operation": "contains",
              "value2": "REVISION"
            }
          ]
        }
      },
      "notes": "Branch on classifier output.",
      "notesInFlow": true
    },
    {
      "id": "9",
      "name": "Revision Agent (LLM)",
      "type": "n8n-nodes-base.openai",
      "typeVersion": 3,
      "position": [2160, 40],
      "parameters": {
        "resource": "chat",
        "model": "gpt-4o-mini",
        "operation": "createChatCompletion",
        "messages": [
          {"role": "system", "content": "Revise only weak sections based on feedback; preserve good content."},
          {"role": "user", "content": "Draft: {{$json.prevDraft}}\nFeedback: {{$json.reviewerNotes || 'Improve clarity and add citations where missing.'}}"}
        ],
        "temperature": 0.5
      },
      "notes": "Selective regeneration loop (cap externally).",
      "notesInFlow": true
    },
    {
      "id": "10",
      "name": "Formatter Agent",
      "type": "n8n-nodes-base.openai",
      "typeVersion": 3,
      "position": [2400, 120],
      "parameters": {
        "resource": "chat",
        "model": "gpt-4o-mini",
        "operation": "createChatCompletion",
        "messages": [
          {"role": "system", "content": "Normalize structure, heading levels, consistent citation markers; return JSON only."},
          {"role": "user", "content": "={{$json.draft || $json.choices[0].message.content}}"}
        ],
        "temperature": 0.2
      },
      "notes": "Applies layout normalization.",
      "notesInFlow": true
    },
    {
      "id": "11",
      "name": "Quality / Critic Agent",
      "type": "n8n-nodes-base.openai",
      "typeVersion": 3,
      "position": [2640, 120],
      "parameters": {
        "resource": "chat",
        "model": "gpt-4o-mini",
        "operation": "createChatCompletion",
        "messages": [
          {"role": "system", "content": "Validate JSON schema fields present, each section length 120-400 words, every section has >=1 citation reference. Return {status:'PASS'|'FAIL', issues:[string], fixedDraft?:string}."},
          {"role": "user", "content": "={{$json.choices[0].message.content}}"}
        ],
        "temperature": 0
      },
      "notes": "Quality gate with optional fix path.",
      "notesInFlow": true
    },
    {
      "id": "12",
      "name": "IF Quality Fail",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2880, 120],
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.choices[0].message.content}}",
              "operation": "contains",
              "value2": "FAIL"
            }
          ]
        }
      },
      "notes": "Branch if additional corrective loop required.",
      "notesInFlow": true
    },
    {
      "id": "13",
      "name": "Telegram Send Final",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [3120, 120],
      "parameters": {
        "operation": "sendMessage",
        "text": "={{$json.finalArticle || $json.choices[0].message.content}}"
      },
      "notes": "Delivers final JSON / formatted output back to user.",
      "notesInFlow": true
    }
  ],
  "connections": {
    "Telegram Trigger": {"main": [[{"node": "Classify Intent / Action", "type": "main", "index": 0}]]},
    "Classify Intent / Action": {"main": [[{"node": "Embed Prompt", "type": "main", "index": 0}]]},
    "Embed Prompt": {"main": [[{"node": "Vector Retrieval (Supabase RPC)", "type": "main", "index": 0}]]},
    "Vector Retrieval (Supabase RPC)": {"main": [[{"node": "Assemble Prompt", "type": "main", "index": 0}]]},
    "Assemble Prompt": {"main": [[{"node": "Draft Generation (LLM)", "type": "main", "index": 0}]]},
    "Draft Generation (LLM)": {"main": [[{"node": "Draft Review Classifier", "type": "main", "index": 0}]]},
    "Draft Review Classifier": {"main": [[{"node": "IF Needs Revision", "type": "main", "index": 0}]]},
    "IF Needs Revision": {"main": [[{"node": "Formatter Agent", "type": "main", "index": 0}], [{"node": "Revision Agent (LLM)", "type": "main", "index": 0}]]},
    "Revision Agent (LLM)": {"main": [[{"node": "Formatter Agent", "type": "main", "index": 0}]]},
    "Formatter Agent": {"main": [[{"node": "Quality / Critic Agent", "type": "main", "index": 0}]]},
    "Quality / Critic Agent": {"main": [[{"node": "IF Quality Fail", "type": "main", "index": 0}]]},
    "IF Quality Fail": {"main": [[{"node": "Telegram Send Final", "type": "main", "index": 0}], [{"node": "Formatter Agent", "type": "main", "index": 0}]]},
    "Telegram Send Final": {"main": [[]]}
  },
  "settings": {
    "executionOrder": "v1"
  },
  "tags": [
    {"name": "content-automation"},
    {"name": "rag"}
  ],
  "pinData": {},
  "versionId": "0001-initial-export",
  "id": "content-automation-rag-pipeline"
}
